<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Búsqueda binaria on ZDoc</title>
    <link>/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/</link>
    <description>Recent content in Búsqueda binaria on ZDoc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Acerca de</title>
        <link>/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/info/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/info/</guid>
        <description>Table of Contents  Ejemplos    La búsqueda binaria es un algoritmo de divide and conquer (dividir y conquistar), que nos
permite encontrar un elemento dentro de una estructura ordenada
rápidamente. Al ejecutarse, toma el centro de un arreglo y comprueba si
el valor que se busca es igual al del centro. De no serlo, verifica si
el valor es menor o mayor al del centro.
Si el valor es mayor al del centro, se ignoran todos los valores</description>
      </item>
      
      <item>
        <title>Uso mediante la librería STL</title>
        <link>/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/en-la-stl/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/en-la-stl/</guid>
        <description>Table of Contents  Importar binary_search() lower_bound() (límite inferior) upper_bound() (límite superior)    Importar Podemos directamente importar toda la stl o podemos importar la librería  de la
siguiente forma:
1  #include &amp;lt;algorithm&amp;gt;   binary_search() La librería STL ya incluye binary search, si queremos saber si el valor
3 está en un vector, podemos ejecutar:
2 3 4 5 6 7 8  vector&amp;lt;int&amp;gt; v{1,2,5,7}; if (binary_search (v.</description>
      </item>
      
      <item>
        <title>Implementaciones propias</title>
        <link>/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/implementaciones-propias/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>/docs/algoritmos-de-busqueda/b%C3%BAsqueda-binaria/implementaciones-propias/</guid>
        <description>Table of Contents  Implementación con while Implementación recursiva    Implementación con while Esta implementación nos retorna el índice del número a buscar dentro de un arreglo.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  int binarySearch(int arr[], int l, int r, int x) { while (l &amp;lt;= r) { int m = l + (r - l) / 2; // Revisa si x esta al medio  if (arr[m] == x) return m; // Si x es mayor, ignorar la izquierda  if (arr[m] &amp;lt; x) l = m + 1; // Si x es menor, ignorar la derecha  else r = m - 1; } return -1; }    Implementación recursiva Esta implementación nos retorna el índice del número a buscar dentro de un arreglo.</description>
      </item>
      
    
  </channel>
</rss>