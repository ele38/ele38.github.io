<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Implementaciones propias on Apuntes YoC&#43; Comunitarios</title>
    <link>/Algoritmos-de-busqueda/Implementaciones-propias/</link>
    <description>Recent content in Implementaciones propias on Apuntes YoC&#43; Comunitarios</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-cl</language><atom:link href="/Algoritmos-de-busqueda/Implementaciones-propias/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementación con while</title>
      <link>/Algoritmos-de-busqueda/Implementaciones-propias/con_while/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/Algoritmos-de-busqueda/Implementaciones-propias/con_while/</guid>
      <description>Esta implementación nos retorna el índice del número a buscar dentro de un arreglo.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  int binarySearch(int arr[], int l, int r, int x) { while (l &amp;lt;= r) { int m = l + (r - l) / 2; // Revisa si x esta al medio  if (arr[m] == x) return m; // Si x es mayor, ignorar la izquierda  if (arr[m] &amp;lt; x) l = m + 1; // Si x es menor, ignorar la derecha  else r = m - 1; } return -1; }    </description>
    </item>
    
    <item>
      <title>Implementación recursiva</title>
      <link>/Algoritmos-de-busqueda/Implementaciones-propias/con_recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/Algoritmos-de-busqueda/Implementaciones-propias/con_recursion/</guid>
      <description>Esta implementación nos retorna el índice del número a buscar dentro de un arreglo.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  int binarySearch(int arr[], int l, int r, int x) { if (r &amp;gt;= l) { int mid = l + (r - l) / 2; // Revisa si x esta al medio  if (arr[mid] == x) return mid; // Si x es mayor, ignorar la izquierda  if (arr[mid] &amp;gt; x) return binarySearch(arr, l, mid - 1, x); // Si x es mayor, ignorar la derecha  return binarySearch(arr, mid + 1, r, x); } return -1; }    </description>
    </item>
    
  </channel>
</rss>
